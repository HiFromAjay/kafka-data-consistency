quarkus.http.port=8082
%test.quarkus.http.test-port=39082

quarkus.smallrye-openapi.path=/swagger
quarkus.swagger-ui.always-include=true

quarkus.hibernate-validator.method-validation.allow-overriding-parameter-constraints=true

kafka.bootstrap.servers=maxant.ch:30001,maxant.ch:30002

mf.messaging.incoming.event-bus-in.topic=contracts-event-bus
# unique ID per pod, as we dont know which one will be serving the browser which needs to receive the incoming event
mf.messaging.incoming.event-bus-in.group.id=mf-web{uniqueid}

mp.messaging.incoming.errors-in.connector=smallrye-kafka
mp.messaging.incoming.errors-in.topic=errors
mp.messaging.incoming.errors-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.errors-in.group.id=mf-web

mp.messaging.incoming.cases-in.connector=smallrye-kafka
mp.messaging.incoming.cases-in.topic=cases-events
mp.messaging.incoming.cases-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.cases-in.group.id=mf-web

mp.messaging.incoming.partners-in.connector=smallrye-kafka
mp.messaging.incoming.partners-in.topic=partners-events
mp.messaging.incoming.partners-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.partners-in.group.id=mf-web

mp.messaging.outgoing.errors-out.connector=smallrye-kafka
mp.messaging.outgoing.errors-out.topic=errors
mp.messaging.outgoing.errors-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.waitingroom01-out.connector=smallrye-kafka
mp.messaging.outgoing.waitingroom01-out.topic=waitingroom01
mp.messaging.outgoing.waitingroom01-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.waitingroom10-out.connector=smallrye-kafka
mp.messaging.outgoing.waitingroom10-out.topic=waitingroom10
mp.messaging.outgoing.waitingroom10-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.organisation-in.connector=smallrye-kafka
mp.messaging.incoming.organisation-in.topic=organisation-events
mp.messaging.incoming.organisation-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.organisation-in.group.id=mf-web
# not necessary, as we also read at startup via rest: auto.offset.reset=earliest

quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) [request-id:%X{request-id} c:%X{command} e:%X{event}] %s%e%n

ch.maxant.kdc.mf.library.SecurityAdapter/mp-rest/uri=http://organisation:8086
ch.maxant.kdc.mf.library.SecurityAdapter/mp-rest/scope=javax.inject.Singleton

quarkus.quartz.force-start=true

# https://quarkus.io/guides/centralized-log-management
quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=maxant.ch
quarkus.log.handler.gelf.port=30055
quarkus.log.handler.gelf.include-full-mdc=true
quarkus.log.handler.gelf.additional-field."component".value=web
quarkus.log.handler.gelf.additional-field."component".type=String
quarkus.log.handler.gelf.level=INFO
# https://logging.paluch.biz/syslog-level-mapping.html: 7=DEBUG,6=INFO,4=WARN,3=ERROR

quarkus.http.host=0.0.0.0

quarkus.jaeger.agent-host-port=maxant.ch:30561
quarkus.jaeger.service-name=contracts
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1

ch.maxant.kdc.mf.components.contracts.url=http://contracts:8080
ch.maxant.kdc.mf.components.pricing.url=http://pricing:8081
ch.maxant.kdc.mf.components.web.url=http://web:8082
ch.maxant.kdc.mf.components.partners.url=http://partners:8083
ch.maxant.kdc.mf.components.cases.url=http://cases:8084
ch.maxant.kdc.mf.components.waitingroom.url=http://waitingroom:8085
ch.maxant.kdc.mf.components.organisation.url=http://organisation:8086
