quarkus.datasource.db-kind=mysql
quarkus.datasource.username=root
quarkus.datasource.password=secret
quarkus.datasource.jdbc.url=jdbc:tracing:mysql://maxant.ch:30300/mfbilling
quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:default;MODE=MySQL;INIT=create domain if not exists json as text;DB_CLOSE_DELAY=-1

quarkus.hibernate-orm.database.generation=none

quarkus.flyway.migrate-at-start=true

quarkus.http.port=8087
%test.quarkus.http.test-port=39087

quarkus.smallrye-openapi.path=/swagger
quarkus.swagger-ui.always-include=true

quarkus.hibernate-validator.method-validation.allow-overriding-parameter-constraints=true

kafka.bootstrap.servers=maxant.ch:30001,maxant.ch:30002

# stream of internal commands/events, related partly to monitoring of jobs, and partly to orchestrating the process steps
mp.messaging.outgoing.stream-out.connector=smallrye-kafka
mp.messaging.outgoing.stream-out.topic=billing-internal-stream
mp.messaging.outgoing.stream-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.stream-out.interceptor.classes=ch.maxant.kdc.mf.library.TracingProducerInterceptor

mp.messaging.outgoing.errors-out.connector=smallrye-kafka
mp.messaging.outgoing.errors-out.topic=errors
mp.messaging.outgoing.errors-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.errors-out.interceptor.classes=ch.maxant.kdc.mf.library.TracingProducerInterceptor

mp.messaging.outgoing.waitingroom01-out.connector=smallrye-kafka
mp.messaging.outgoing.waitingroom01-out.topic=waitingroom01
mp.messaging.outgoing.waitingroom01-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.waitingroom01-out.interceptor.classes=ch.maxant.kdc.mf.library.TracingProducerInterceptor

mp.messaging.outgoing.waitingroom10-out.connector=smallrye-kafka
mp.messaging.outgoing.waitingroom10-out.topic=waitingroom10
mp.messaging.outgoing.waitingroom10-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.waitingroom10-out.interceptor.classes=ch.maxant.kdc.mf.library.TracingProducerInterceptor

mf.messaging.incoming.contracts-event-bus-in.topic=contracts-event-bus
mf.messaging.incoming.contracts-event-bus-in.group.id=mf-billing
mf.messaging.incoming.contracts-event-bus-in.auto.offset.reset=earliest
mf.messaging.incoming.contracts-event-bus-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mf.messaging.incoming.billing-in.topic=billing-internal-bill
mf.messaging.incoming.billing-in.group.id=mf-billing
mf.messaging.incoming.billing-in.auto.offset.reset=earliest
mf.messaging.incoming.billing-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mf.messaging.incoming.all-group-state-in.topic=billing-internal-state-groups
# subscribe to ALL partitions of the topic, not just some partitions, so that we can provide SSE events to all subscribers
mf.messaging.incoming.all-group-state-in.group.id=mf-billing{uniqueid}
# latest is OK, because this i sjust used as a trigger for the UI to update itself
mf.messaging.incoming.all-group-state-in.auto.offset.reset=latest
mf.messaging.incoming.all-group-state-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mf.messaging.incoming.all-job-state-in.topic=billing-internal-state-jobs
# subscribe to ALL partitions of the topic, not just some partitions, so that we can provide SSE events to all subscribers
mf.messaging.incoming.all-job-state-in.group.id=mf-billing{uniqueid}
# latest is OK, because this i sjust used as a trigger for the UI to update itself
mf.messaging.incoming.all-job-state-in.auto.offset.reset=latest
mf.messaging.incoming.all-job-state-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mp.messaging.incoming.organisation-in.connector=smallrye-kafka
mp.messaging.incoming.organisation-in.topic=organisation-events
mp.messaging.incoming.organisation-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.organisation-in.group.id=mf-billing
# not necessary, as we also read at startup via rest: auto.offset.reset=earliest
mp.messaging.incoming.organisation-in.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) [request-id:%X{request-id} c:%X{command} e:%X{event}] %s%e%n

ch.maxant.kdc.mf.library.SecurityAdapter/mp-rest/uri=http://organisation:8086
ch.maxant.kdc.mf.library.SecurityAdapter/mp-rest/scope=javax.inject.Singleton

quarkus.quartz.force-start=true

# https://quarkus.io/guides/centralized-log-management
quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=maxant.ch
quarkus.log.handler.gelf.port=30055
quarkus.log.handler.gelf.include-full-mdc=true
quarkus.log.handler.gelf.additional-field."component".value=billing
quarkus.log.handler.gelf.additional-field."component".type=String
quarkus.log.handler.gelf.level=INFO
# https://logging.paluch.biz/syslog-level-mapping.html: 7=DEBUG,6=INFO,4=WARN,3=ERROR

quarkus.http.host=0.0.0.0

quarkus.jaeger.agent-host-port=maxant.ch:30561
quarkus.jaeger.service-name=billing
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
