# ##############################################################################################
# see also https://github.com/simplesteph/kafka-stack-docker-compose/blob/master/full-stack.yml
# ##############################################################################################
version: '3'
services:

  kdc-zookeeper:
    image: "confluentinc/cp-zookeeper:5.5.0"
    container_name: "kdc-zookeeper"
    ports:
      - "30000:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_JMX_PORT: 9876
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
      KAFKA_JMX_HOSTNAME: kdc-zookeeper
    #volumes:
    #  - ./full-stack/zoo1/data:/data
    #  - ./full-stack/zoo1/datalog:/datalog

  kdc-kafka-1:
    image: "confluentinc/cp-kafka:5.5.0"
    container_name: "kdc-kafka-1"
    ports:
      - "30001:9092"
    depends_on:
      - kdc-zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kdc-zookeeper:2181'
      # see: https://rmoff.net/2018/08/02/kafka-listeners-explained/
      # note that we MUST use "PLAINTEXT" as the name, so that schemaregistry and kafka-rest can connect.
      # see: https://github.com/confluentinc/schema-registry/issues/648
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://maxant.ch:30001
      KAFKA_LISTENERS: PLAINTEXT://kdc-kafka-1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://kdc-schemaregistry:8085
      KAFKA_JMX_PORT: 9876
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
      KAFKA_JMX_HOSTNAME: kdc-kafka-1
    #volumes:
    #  - ./full-stack/kafka1/data:/var/lib/kafka/data

  kdc-kafka-2:
    image: "confluentinc/cp-kafka:5.5.0"
    container_name: "kdc-kafka-2"
    ports:
      - "30002:9092"
    depends_on:
      - kdc-kafka-1
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'kdc-zookeeper:2181'
      # see notes for broker #1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://maxant.ch:30002
      KAFKA_LISTENERS: PLAINTEXT://kdc-kafka-2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://kdc-schemaregistry:8085
    #volumes:
    #  - ./full-stack/kafka1/data:/var/lib/kafka/data

  kdc-kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: "kdc-kafdrop"
    ports:
      - "30060:9000"
    depends_on:
      - kdc-kafka-1
      - kdc-kafka-2
      - kdc-schemaregistry
    environment:
      KAFKA_BROKERCONNECT: "kdc-kafka-1:9092,kdc-kafka-2:9092"
      SCHEMAREGISTRY_CONNECT: "http://kdc-schemaregistry:8085"
  portainer:
    image: "portainer/portainer"
    container_name: "portainer"
    ports:
      - "29999:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /portainer_data:/data

#  cadvisor:
#    image: google/cadvisor:latest
#    container_name: cadvisor
#    ports:
#      - "29998:8080"
#    volumes:
#      - /var/lib/docker/:/var/lib/docker:ro
#      - /sys:/sys:ro
#      - /var/run:/var/run:rw
#      - /:/rootfs:ro

  kdc-mysql:
    image: "mysql:8.0.19"
    container_name: "kdc-mysql"
    ports:
      - "30300:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "secret"
    volumes:
      - ./mysql-data:/var/lib/mysql:rw

  # https://github.com/confluentinc/cp-demo/blob/5.5.0-post/docker-compose.yml
  kdc-schemaregistry:
    image: "confluentinc/cp-schema-registry:5.5.0"
    container_name: "kdc-schemaregistry"
    ports:
      - 30550:8085
    depends_on:
      - kdc-kafka-1
      - kdc-kafka-2
    environment:
      CUB_CLASSPATH: '/etc/confluent/docker/docker-utils.jar:/usr/share/java/confluent-security/schema-registry/*:/usr/share/java/schema-registry/*'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kdc-kafka-1:9092,kdc-kafka-2:9092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: kdc-zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: kdc-schemaregistry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_DEBUG: 'true'
      # Used by Schema Registry to connect to MDS to authenticate and authorize clients:
      SCHEMA_REGISTRY_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://kdc-kafka-1:9092,http://kdc-kafka-2:9092

  kdc-schemaregistry-ui:
    image: "landoop/schema-registry-ui:0.9.4"
    container_name: "kdc-schemaregistry-ui"
    ports:
      - "30555:8000"
    depends_on:
      - kdc-schemaregistry
    environment:
      SCHEMAREGISTRY_URL: http://kdc.schemaregistry.maxant.ch/
      PROXY: "true"

  kdc-kafka-rest-proxy:
    image: "confluentinc/cp-kafka-rest:5.5.0"
    container_name: "kdc-kafka-rest-proxy"
    ports:
      - "30030:8082"
    depends_on:
      - kdc-schemaregistry
    environment:
      # KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kdc-schemaregistry:8085/
      KAFKA_REST_HOST_NAME: kdc-kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kdc-kafka-1:9092,PLAINTEXT://kdc-kafka-2:9092

  # https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: "elasticsearch"
    ports:
      - "30050:9200"
      - "30051:9300"
    environment:
      "node.name": "elasticsearch"
      "bootstrap.memory_lock": "true"
      "discovery.type": "single-node"
      "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
    volumes:
      - ./es-data:/usr/share/elasticsearch/data
  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    container_name: "logstash"
    volumes:
      - ./pipelines:/usr/share/logstash/pipeline
    ports:
      - "30055:12201/udp"
      - "30056:5000"
      - "30057:9600"
    depends_on:
      - elasticsearch
    #environment:
      # https://www.elastic.co/guide/en/logstash/7.10/docker-config.html#docker-env-config
      # not defined in oss image:
      #"monitoring.elasticsearch.hosts": "http://kdc.elasticsearch.maxant.ch1"
      #"MONITORING_ELASTICSEARCH_HOSTS": "http://kdc.elasticsearch.maxant.ch2"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: "kibana"
    ports:
      - "30150:5601"
    links:
      - "elasticsearch:elasticsearch"
    depends_on:
      - elasticsearch
    #environment:
      # https://www.elastic.co/guide/en/kibana/current/settings.html
      #"ELASTICSEARCH_HOSTS": "http://kdc.elasticsearch.maxant.ch"
      #"ELASTICSEARCH_HOSTS": "http://maxant.ch:30050" => doesnt work entirely because somehow it still cannot connect. maybe to 9300 instead of 9200?
      #"XPACK_SECURITY_ENABLED": "false"
      # seems to work out of the box, when we name ES "elasticsearch"
    #https://www.elastic.co/guide/en/kibana/current/docker.html
    #volumes:
    #  - ./kibana.yml:/usr/share/kibana/config/kibana.yml

  prometheus:
    image: "prom/prometheus"
    container_name: "prometheus"
    ports:
      - "29996:9090/tcp"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: "grafana/grafana"
    container_name: "grafana"
    depends_on:
      - prometheus
    ports:
      - 29993:3000
    volumes:
      - ./grafanadata:/var/lib/grafana

# TODO https://docs.docker.com/compose/compose-file/#healthcheck
# TODO https://docs.docker.com/compose/compose-file/#restart
# TODO add kafka to prometheus
# TODO add quarkus app to prometheus
# TODO add a docker registry to maxant.ch?
# TODO JMX for other confluent components: https://docs.confluent.io/current/installation/docker/operations/monitoring.html#configure-other-cp-components
# build a stream app and deploy using quarkus and integrate metrics - see also https://quarkus.io/guides/microprofile-metrics
# use kafka-rest to add topics at deployment. whats this? https://docs.docker.com/compose/compose-file/compose-file-v2/#init
